{"version":3,"sources":["webpack:///./task1.js","webpack:///./task2.js","webpack:///./task3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","userName","user","allUsers","map","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3BC,YAAW,WACPF,EAAQ,GAAIF,KACnBA,OAKGK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,07BCfjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACH,EAAOI,GAC5B,OAAO,IAAIb,SAAQ,SAACC,EAASC,GACzB,cAAmBO,KAAnB,aAA0B,KAAfK,EAAe,QACnBA,EAAKJ,OAASG,IACzBC,EAAKH,QAAUG,EAAKH,QAIxBV,EAAQQ,GAIER,EAHmBc,SAASC,KAAI,SAAAF,GAAI,OAClCA,EAAKJ,OAASG,EAAd,iBAA8BC,EAA9B,CAAoCH,QAASG,EAAKH,SAAWG,UAMnEV,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAM7CL,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCpCnC,IAIMe,EAAkB,SAACC,GAGrB,OAAO,IAAIpB,SAAQ,SAACC,EAASC,GACzB,IAR2BmB,EAAKC,EAQ1BxB,GARqBuB,EAQa,IARRC,EAQa,IAP1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAShDlB,YAAW,WACYoB,KAAKE,SAAW,GAG/BxB,EAAQ,CAAEyB,GAAIN,EAAYM,GAAIrB,KAAMP,IAC/BI,EAAOkB,EAAYM,MAG7B5B,OAKL6B,EAAa,SAACD,EAAIrB,GACtBC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGIuB,EAAW,SAAAF,GACfpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BAaFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACHI,MAAMH,K","file":"main.75c3ead35ff0f54f66fc.js","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      setTimeout(() => {\r\n          resolve(`${ ms }`);\r\n}, ms);\r\n      });\r\n\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n\r\n// Напиши функцию delay(ms), которая возвращает промис,\r\n// переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд\r\n// которое передали во время вызова функции delay.","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (users, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n        for (const user of users) {\r\n            if(user.name === userName) {\r\n    user.active = !user.active;\r\n        }\r\n        \r\n}\r\nresolve(users); \r\n        const updatedUsers = allUsers.map(user =>\r\n            user.name === userName ? { ...user, active: !user.active } : user,\r\n          );\r\n          resolve(updatedUsers);\r\n      })} \r\n\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n// Перепиши функцию toggleUserState() так,\r\n//     чтобы она не использовала callback - функцию\r\n// callback, а принимала всего два параметра\r\n// allUsers и userName и возвращала промис.","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({ id: transaction.id, time: delay });\r\n            } else { reject(transaction.id) };\r\n            \r\n    \r\n        }, delay);\r\n    });\r\n}\r\n\r\n\r\nconst logSuccess = (id, time) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала\r\n// callback - функции onSuccess и onError, а принимала всего один параметр\r\n// transaction и возвращала промис."],"sourceRoot":""}